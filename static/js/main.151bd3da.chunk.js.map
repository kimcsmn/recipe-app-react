{"version":3,"sources":["components/Ingredients.js","components/Nutrients.js","components/Modal.js","components/Recipe.js","App.js","index.js"],"names":["Ingredients","ingredients","className","map","i","text","Math","random","Nutrients","nutrients","carbs","CHOCDF","fat","FAT","fiber","FIBTG","protein","PROCNT","sugar","SUGAR","cholesterol","CHOLE","label","floor","quantity","unit","Modal","showModal","setShowModal","onClick","Recipe","image","calories","useState","e","src","alt","App","recipes","setRecipes","keyword","setKeyword","query","setQuery","useEffect","getRecipe","a","fetch","res","json","data","hits","onSubmit","preventDefault","type","value","onChange","target","r","recipe","totalNutrients","root","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.151bd3da.chunk.js","sourcesContent":["import React from 'react'\n\nconst Ingredients = ({ingredients}) => {\n  return(\n    <div className=\"ingredients\">\n      <h1>Ingredients</h1>\n       <ul className=\"modal\" >\n          {ingredients.map(i => {\n            return(\n              <li key={Math.random() * 100}>{i.text}</li>\n            )\n          })}\n      </ul>\n    </div>\n  )\n}\n\nexport default Ingredients\n","import React from 'react'\n\nfunction Nutrients({nutrients}) {\n  const {CHOCDF: carbs , FAT: fat, FIBTG: fiber, PROCNT: protein, SUGAR: sugar, CHOLE: cholesterol} = nutrients;\n  return (\n\n    <div className=\"nutrients\">\n       <h1>Nutrition Facts</h1>\n       <ul key={Math.random() * 100}>\n          <li>{`${fat.label}: ${Math.floor(fat.quantity)} ${fat.unit}`}</li>\n          <li>{`${protein.label}: ${Math.floor(protein.quantity)} ${protein.unit}`}</li>\n          <li>{`${carbs.label}: ${Math.floor(carbs.quantity)} ${carbs.unit}`}</li>\n          <li>{`${fiber.label}: ${Math.floor(fiber.quantity)} ${fiber.unit}`}</li>\n          <li>{`${sugar.label}: ${Math.floor(sugar.quantity)} ${sugar.unit}`}</li>\n          <li>{`${cholesterol.label}: ${Math.floor(cholesterol.quantity)} ${cholesterol.unit}`}</li>\n        </ul>\n    </div>\n  )\n}\n\nexport default Nutrients\n","import React from 'react'\nimport Ingredients from './Ingredients'\nimport Nutrients from './Nutrients'\n\nfunction Modal({showModal, setShowModal, ingredients, label, nutrients}) {\n\n  return (\n    <>\n    {showModal ? (\n    <div className=\"modalWrapper\">\n      <h3 className=\"modalTitle\">{label} Recipe</h3>\n      <div className=\"modalContent\">\n        <Ingredients ingredients={ingredients} label={label}/>\n        <Nutrients nutrients={nutrients}/>\n      </div>\n      <button onClick={() => {setShowModal(!showModal)}}>Close</button>\n    </div>\n    ) : null}\n    </>\n  )\n}\n\nexport default Modal\n","import React, {useState} from 'react';\nimport Modal from './Modal';\n\nfunction Recipe({ label, image, calories, ingredients, nutrients}){\n\n  const [showModal, setShowModal] = useState(false)\n\n  const openModal = (e) => {\n    return setShowModal(!showModal)\n  }\n\n  return(\n    <div className=\"recipe\">\n      <div className=\"recipe-info\">\n        <h2>{label}</h2>\n        <p>Total Calories: {Math.floor(calories)}</p>\n        <button className=\"modalBtn\" onClick={openModal}>Show More</button>\n        <Modal showModal={showModal} setShowModal={setShowModal} ingredients={ingredients} label={label} nutrients={nutrients}></Modal>\n      </div>\n      <div className=\"image-container\">\n        <img src={image} alt={label} />\n      </div>\n    </div>\n  )\n}\n\nexport default Recipe\n","import React, {useEffect, useState} from 'react'\nimport Recipe from './components/Recipe';\n\nfunction App() {\n\n  const APP_KEY = \"8a8f88177c98615233f03555bca75607\";\n  const APP_ID = \"bc7f7b0b\";\n\n  // state hooks\n  const [recipes, setRecipes] = useState([]);\n\n  // state of search input\n  const [keyword , setKeyword] = useState(\"\");\n\n  // state of final input\n  const [query, setQuery] = useState(\"chicken\");\n\n  // execute getRecipe whenever query is updated\n  useEffect(() => {\n    getRecipe();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [query]);\n\n  // fetch the data from api\n  const getRecipe = async () => {\n    const res = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n    const data = await res.json();\n    setRecipes(data.hits);\n  }\n\n  const handleChange = (e) => {\n    setKeyword(e.target.value);\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setQuery(keyword)\n    setKeyword(\"\");\n  }\n\n    return(\n      <div className=\"App\">\n        <form className=\"form\" onSubmit={handleSubmit}>\n          <input type=\"text\" value={keyword} onChange={handleChange}/>\n          <button type=\"submit\" >Search</button>\n        </form>\n\n      <div className=\"Recipe\">\n        {\n         recipes.map(r => {\n           return(\n            <Recipe\n             key={r.recipe.label}\n             label={r.recipe.label}\n             image={r.recipe.image}\n             ingredients={r.recipe.ingredients}\n             calories={r.recipe.calories}\n             nutrients={r.recipe.totalNutrients}\n           />\n           )\n         })\n       }\n      </div>\n\n      </div>\n    )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nconst root = document.getElementById('root')\nReactDOM.render(\n  <App />, root\n)\n"],"sourceRoot":""}